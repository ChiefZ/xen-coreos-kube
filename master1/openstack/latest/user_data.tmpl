#cloud-config

hostname: kubernetes-master

ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCUKf6ZNILSRI2FMcwLPQWF/BNLYreq9cX/vH16DZRrIjxBjehn+1bueywC+0sAbUE+3pjRTnYUDvmO0sHgbAN3brVeAXAYbbIPwcAJ9sd/hozKZ3lZyamZ6wPOlseCXPEV4ApGP64GH/5lkHSqEVe2mZFL2Th1rLX8/+jkpmjIzrKbxUTTwhs3yTm6RPb0gr1zgBfvWn5tKmM+wCLe1Zq8bFV7d+RHdS7pCCNJZLMxCaU6pjVM6c57JR4qYusdIS2cJkUfeGPDC2mdPUdDYV0W9GWc8fXR8vwO4E8tqLpP/rtQ1TqMfbZ3Q8Z0IjfCDpyM7dnrKEeXToWeqC+7Qco4l4qmkhiEw6ldacyMBSxcOVu7wbQJNCfagUyUEPbK1qYzn6jmqVWt4tnbM/g+qXnKP1NReE5SLqynFN6t5DbIIRlW9PA4437131lDQ7DIU3SfbMRJ+lGSWkGKMU/qtjTX6KsPJseFSJOnJmO0ZnWlc/6If6rPMQ9TPCwJ0D5ziNTvaFaR9Z4i0GRefQzlFWLNjLIsE5cCNtjXwr8H6rKHFqZ/qvnXAsIXQmaOku9WELWl5SYrhwm+hU34Dmd3eBY2PJwJiPABkmlacpIgaY2qAh3iwaNDEBbt3F/duWY9eAOPPeRUBQe+exHOBZn7hW4js1KethhFzL7+hvJ/1XlA5Q== root@xen

write_files:
  - path: /etc/systemd/journald.conf
    permissions: 0644
    content: |
      [Journal]
      SystemMaxUse=50M
      RuntimeMaxUse=50M
  - path: /etc/kubernetes/ssl/ca.pem
    permissions: '0644'
    content: |
     	CA.PEM 
  - path: /etc/kubernetes/ssl/apiserver.pem
    permissions: '0644'
    content: |
	APISERVER.PEM
  - path: /etc/kubernetes/ssl/apiserver-key.pem
    permissions: '0600'
    owner: root:root
    content: |
	APISERVER-KEY.PEM
  - path: /etc/flannel/options.env
    permissions: '0644'
    content: |
      FLANNELD_IFACE=192.168.122.254
      FLANNELD_ETCD_ENDPOINTS=http://192.168.122.2:2379,http://192.168.122.3:2379,http://192.168.122.4:2379,http://192.168.122.254:2379
  - path: /etc/kubernetes/manifests/kube-apiserver.yaml
    permissions: '0644'
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-apiserver
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-apiserver
          image: gcr.io/google_containers/hyperkube-amd64:v1.2.2
          command:
          - /hyperkube
          - apiserver
          - --bind-address=0.0.0.0
          - --etcd-servers=http://192.168.122.2:2379,http://192.168.122.3:2379,http://192.168.122.4:2379,http://192.168.122.254:2379
          - --allow-privileged=true
          - --service-cluster-ip-range=10.3.0.0/24
          - --secure-port=443
          - --advertise-address=192.168.122.254
          - --admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota
          - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
          - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          - --client-ca-file=/etc/kubernetes/ssl/ca.pem
          - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          ports:
          - containerPort: 443
            hostPort: 443
            name: https
          - containerPort: 8080
            hostPort: 8080
            name: local
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    permissions: '0644'
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: gcr.io/google_containers/hyperkube-amd64:v1.2.2
          command:
          - /hyperkube
          - proxy
          - --master=http://127.0.0.1:8080
          - --proxy-mode=iptables
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
  - path: /etc/kubernetes/manifests/kube-controller-manager.yaml
    permissions: '0644'
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-controller-manager
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-controller-manager
          image: gcr.io/google_containers/hyperkube-amd64:v1.2.2
          command:
          - /hyperkube
          - controller-manager
          - --master=http://127.0.0.1:8080
          - --service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          - --root-ca-file=/etc/kubernetes/ssl/ca.pem
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10252
            initialDelaySeconds: 15
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
  - path: /etc/kubernetes/manifests/kube-scheduler.yaml
    permissions: '0644'
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-scheduler
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-scheduler
          image: gcr.io/google_containers/hyperkube-amd64:v1.2.2
          command:
          - /hyperkube
          - scheduler
          - --master=http://127.0.0.1:8080
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10251
            initialDelaySeconds: 15
            timeoutSeconds: 1
  - path: /etc/conf.d/nfs
    permissions: '0644'
    content: |
      OPTS_RPC_MOUNTD=""
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sIf http://${1}; do \
          sleep 1 && echo .;
        done;
      exit $?

coreos:
  etcd2:
    advertise-client-urls: http://192.168.122.254:2379
    initial-advertise-peer-urls: http://192.168.122.254:2380
    listen-client-urls: http://0.0.0.0:2379
    listen-peer-urls: http://192.168.122.254:2380
    initial-cluster-state: new
    initial-cluster: kubernetes-node-1=http://192.168.122.2:2380,kubernetes-node-2=http://192.168.122.3:2380,kubernetes-node-3=http://192.168.122.4:2380,kubernetes-master=http://192.168.122.254:2380
  units:
    - name: static.network
      command: start
      content: |
        [Match]
        # Name=eth0
        MACAddress=52:54:00:00:00:3

        [Network]
        Address=192.168.122.254/24
        DNS=192.168.122.1
        Gateway=192.168.122.1
    - name: cbr0.netdev
      command: start
      content: |
        [NetDev]
        Kind=bridge
        Name=cbr0
    - name: cbr0.network
      command: start
      content: |
        [Match]
        Name=cbr0

        [Network]
        Address=10.10.0.1/24

        [Route]
        Destination=10.10.0.0/16
    - name: cbr0-interface.network
      command: start
      content: |
        [Match]
        # Name=eth1
        MACAddress=52:54:00:00:01:3

        [Network]
        Bridge=cbr0
    - name: nat.service
      command: start
      content: |
        [Unit]
        Description=NAT non container traffic

        [Service]
        ExecStart=/usr/sbin/iptables -w -t nat -A POSTROUTING -o eth0 -j MASQUERADE ! -d 10.10.0.0/16
        RemainAfterExit=yes
        Type=oneshot
    - name: etcd2.service
      command: start
      drop-ins:
        - name: 10-override-name.conf
          content: |
            [Service]
            Environment=ETCD_NAME=%H
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 40-ExecStartPre-symlink.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.2.0.0/16", "Backend": {"Type": "vxlan"}}'
    - name: docker.service
      command: start
      drop-ins:
        - name: 50-opts.conf
          content: |
            [Service]
            #Environment='DOCKER_OPTS=--bridge=cbr0 --iptables=false'
            Requires=flanneld.service
            After=flanneld.service
    - name: docker-tcp.socket
      command: start
      enable: yes
      content: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=2375
        BindIPv6Only=both
        Service=docker.service
    - name: kubelet.service
      command: start
      content: |
        [Service]
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests

        Environment=KUBELET_VERSION=v1.2.0_coreos.0
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --api-servers=http://127.0.0.1:8080 \
        --register-node=true \
        --allow-privileged=true \
        --config=/etc/kubernetes/manifests \
        --hostname-override=192.168.122.254 \
        --cluster-dns=10.3.0.10 \
        --cluster-domain=cluster.local \
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target

